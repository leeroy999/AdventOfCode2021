arr = {
    "FFBBBBBLLR",
"BFBFBBBRLL",
"FBFFFFBLRL",
"BFFBFBBRLR",
"FFBBFFFRRL",
"FBFBFFBLLR",
"BFFBFBFLLR",
"BFFBBBBRRL",
"FBBBFBFLRL",
"BFFBFBBRLL",
"FFBBFBBRRR",
"BBFBBBBLRL",
"FFBFBBFLRL",
"BBFFFBBLLR",
"FFBBBFFRLL",
"FBFBFFBLRL",
"BFFFBFBLRL",
"FFBFBFFRRL",
"BBBFFFBRRR",
"BBFFBBFLLL",
"BFBBBFBLRR",
"FBFBFFBRRL",
"FFFBBFBLLR",
"FBBFBFFRLR",
"FBFFFFBRRL",
"BBFFFFFLLR",
"BFBFFBBLLR",
"FFBFBBBRRR",
"FFBBBBBRLR",
"BBFFBFFRLR",
"BBFBBBBRRL",
"FFBFFFFLLL",
"BBBFFBFRRL",
"FFBFFFFLRR",
"FBBBBBFLLR",
"BFBFBBBLRL",
"BFBBBFFRRL",
"FBFFBBFRRR",
"BBFFFFBRLR",
"FFBFBBFRLL",
"FFBFBFBLLL",
"FBBBFBFRRR",
"FFFBBBFRLL",
"BFFFBBBLLR",
"FBFFBFBRLR",
"FFBFBBBLLL",
"BFBBBFFLLL",
"BFFBFBFLRR",
"BFFBFBBRRR",
"BFBBBFBLLL",
"FBFFBFFLRL",
"BBFFFBBRRL",
"FFFBFBBRLR",
"BBFBBBFLLR",
"FFBBBBBLRR",
"BFFFFBFRRL",
"BFFFBBBRLR",
"BFBBBBBLLR",
"FBFBBFFRRL",
"BFFBFFBLLR",
"FFBBFFFRLR",
"FBBFFFBLLL",
"FFFBBFFLRR",
"BBFFFFBRLL",
"BFFFFFFRLR",
"BFFBBBFLLR",
"BFBBBFBRRL",
"FBFBBFFRRR",
"BFBFBFFLRR",
"BBFBFFFLLL",
"BBBFFBFLLL",
"FFBBFBFRRL",
"FBBFFFBLRL",
"BFBBBBFLLR",
"BFBFBBBLRR",
"BFBBBBBRLR",
"BFFFBFFRRL",
"BFFFBFFLLL",
"BFBBBBBRLL",
"BBFFBFBRLL",
"FBBBBBFRLR",
"BBFFBFFLLR",
"FBBFFFFRLR",
"FBFFFBFLRL",
"BBFBFBBRLR",
"BFFBBFBRRL",
"FBFFFFFRRR",
"BFBFBBFLLL",
"FBBFBBFRLR",
"BFBBFBBRRR",
"FFFBBBFLRL",
"BFFBFFBRRL",
"FBFBFBBLLR",
"BBFBFFFLRL",
"FFFBFBBRRR",
"BBFFBBFRRL",
"BFBFBFBLRR",
"BFFBBBBRLR",
"FBBFFFFLLR",
"FBBBFFBLLR",
"FBBBBFFLRL",
"FBBBBFFLLL",
"BBFFBBFRLR",
"FFBBFBFLRL",
"BFBFFBBRLL",
"FBFBBFFLRR",
"BFFFFFBRLL",
"BBFBFBBRRL",
"FBBBBBBLLR",
"BBFBFBFLLL",
"BFFFFBBRLL",
"BFBFFBFRRL",
"FFBFFBFLLL",
"BFFFBFBLLR",
"FBBFBFFRRR",
"FBBFFBFRLR",
"FBBFBFBRRR",
"FBFBBFBRLR",
"FFFBBFBRRL",
"FBBBBFBLRR",
"FBBFBBFLRR",
"BBBFFBFRRR",
"BFFBBBBLLL",
"FBFBFBFLRL",
"FFBFFBFLRL",
"FFFBBFBLLL",
"FBBFFBFLLR",
"FBBBFBBRRR",
"FBBBBFBRLR",
"FBBFFFFRRR",
"FFFBFBFLLR",
"FFBFFFFRRR",
"BFBBBBFRLR",
"BFFBFBFRRR",
"BBFBBFFRLL",
"BFFBFFFLLR",
"FBBBFBBRLL",
"BBFBFFFRRR",
"FFBFBBBRRL",
"FBBBFBFLLL",
"FBBBFBBLRR",
"BFBFBBFRLL",
"BFBFBFBRLL",
"FBFFBBBLRL",
"FBBBBFFRRL",
"BBFFBFBRLR",
"BBFFBFFRRR",
"FFFBFBFLRR",
"FFFBFBBLLR",
"FBBBFFFRLL",
"FBFBBBFLLL",
"FBFBBFFRLL",
"BFBBFFBLLR",
"FFBFFFFRLR",
"BFFFBBFRRL",
"BFBBFBFLLL",
"FBFFFBFLLR",
"BBBFFBFRLR",
"BFFBBFFLLL",
"FFBBBBBRRL",
"BBFFBFBLLL",
"BFFFBFFLLR",
"BBBFFBFLRL",
"BFBFFBFLLL",
"FBFFBFFRLR",
"FFBFBBBLRL",
"FBBFBFBLLR",
"FBBFBBFLRL",
"FFBBFFBLRL",
"FFBBBBFRLR",
"FFBFFFFRLL",
"FFBBBFBRLL",
"BFFFBBFLRL",
"FFFBBBFRRL",
"BFBFBFFLLR",
"FFFBFBFRLR",
"BBFBFBFRLR",
"FBBBFFBRRL",
"FFBBBBFLLL",
"FFBBFFBRLL",
"FBBFFFBRRR",
"FFFBBBBRLL",
"FBFFFBFRRR",
"BFBBBFFLLR",
"BBFBBFBLRR",
"FFBFBBBLLR",
"BFBFBBBRRR",
"BBFFFBBLRR",
"FBFBFFBLRR",
"FFFBFBBLLL",
"FFBFFBFRRL",
"FFFBFBBRRL",
"BFBBBFBRLL",
"BFBFFFFLLL",
"BFBFBBBRRL",
"FFFBBFBRLR",
"BBFBBBBRLL",
"FBFBBBFLRL",
"FFBFFBFRLR",
"BFBBBBFLLL",
"FFBBBBFLRL",
"BFFBFBFRRL",
"BFFFBBFLLR",
"BFFFBBFRRR",
"BFBFBFBLLL",
"BFFFFFBLLR",
"BFFFBBFLLL",
"BFBBBBFRRL",
"BBFFBBFLRR",
"BBBFFFFLRR",
"FFBFBFFLLR",
"FBFFBFFLLR",
"BFBFFFFRLR",
"FFBFFBFRLL",
"FFBFBFBLRL",
"BFFBBFFRRR",
"BFFFBBFLRR",
"FBFBFBBLRL",
"BFFBFFFLRL",
"FBFFBBBLRR",
"FBBFFFFLRL",
"BBBFFFBLRR",
"FBFFFBBRLL",
"BFBBFFFRLL",
"FFFBBBBLRR",
"BFBBBBBRRR",
"FBBBBBFRLL",
"BFBFFBBRLR",
"BFFFBFFLRL",
"FBFBFBFRRL",
"FBFFBFFRRR",
"FFBBFFBLRR",
"FFBFFBBRLR",
"FBBBFFFRLR",
"BFFBBBBLRR",
"FBFFFFBLRR",
"BFBBFFFLLR",
"FBFFBBBLLR",
"FBFFFBBRRR",
"BFFBFBBLLL",
"FFBBBBBRRR",
"BFBBFFBRRR",
"FBBBBBBRRL",
"BFBBFBFLRR",
"BBFBFFBRLL",
"FBFFFFBRLL",
"BFBFBBFLRL",
"BFBFFFFLLR",
"BFFFBBBLRL",
"BBFFFFFRLL",
"BBBFFBBRLR",
"BBFBBFBLRL",
"BBFBFFBLLR",
"BBFBFBFLRR",
"FFBBFFBRRL",
"FFBFBBBRLR",
"BBFFFFBRRR",
"BFBFFFBRLR",
"BBFFFFBLLR",
"BBFFBFFLRR",
"FBBFBFBRLR",
"FFBBBFFLRR",
"BFBBFFBRLL",
"FBFBBBBLLR",
"FBBFFFBRLL",
"FBBFFFBLRR",
"FBFFFBBLLR",
"BBFFFBBRLL",
"BBFBBBFRRR",
"FFBBFFFLLL",
"BFBBBFFRLR",
"BFBBFBBRLL",
"BFFFFFBLRR",
"BFBFBFBRLR",
"BFBFFBFLRL",
"FFBFBFBRLL",
"BBFFFBFLLR",
"FFBFBFBRLR",
"FFFBBBBLLR",
"FBFBBBBRRR",
"BBFBBBFLRL",
"BBFBBBFRRL",
"FBFFBBFLLR",
"FBFFBFBLRL",
"BBFBBFBRLR",
"BFFFFBBRLR",
"BBFFFBFRLL",
"BFBFFBBLRL",
"FFFBFBBLRL",
"FFBBBBFLLR",
"BBFBBFBRRL",
"BFBBFBFLRL",
"BBFFBBFLRL",
"BFBFFBFRLL",
"BFFFFBBRRR",
"BFFFFBFRLL",
"FFBBFFBLLL",
"BFBBBBBLRL",
"FBBBFFBRLL",
"FBBFFFFRLL",
"BFFBFFFRLR",
"BFBBFBBLRR",
"BBFBFFBLRR",
"FBBBBBBLRL",
"BBBFFFFLRL",
"FFBBFBBRLR",
"FFFBBBFRRR",
"FBFFFFBRLR",
"BBFFFFBLLL",
"BFBBBFBRRR",
"FFFBBBBLRL",
"FFBFBFFLRR",
"BBFBFBFLRL",
"BFBBBBBLRR",
"BBFFBFBRRL",
"FBBFBBFRRL",
"BFFFFFBLRL",
"FFBFBBFLLL",
"BFFBBFFLRL",
"BBBFFFFLLR",
"BFBFFBBRRL",
"FBBBBFBLLL",
"BBFFBBBLRL",
"FBFBFFFRLR",
"FFBBFFFLRL",
"BFFBBFBRLL",
"FBBFBBFRRR",
"FBFBBBFRRR",
"BFBFBBFRRL",
"FBBBFBFRRL",
"FBBBBBBRLL",
"FBFFFFBLLR",
"FBFBFBBRRR",
"BFBBBBFRRR",
"BBFFFFBLRL",
"BFBBFBBLRL",
"BFFBBFBRLR",
"BFFBFBBLLR",
"BFFFBBBRLL",
"FBBFFBFRRR",
"BFFBFBBLRR",
"FFBFFFFLRL",
"BFBBFBBRRL",
"FBBBFFFLRL",
"FFBFBFBLRR",
"FBFFFBBLLL",
"FBBFFBBLLL",
"BFBBBBBLLL",
"FFBBBFBRRR",
"FBBBBBBLLL",
"FBFFBBFRLR",
"FBFBBBBLRR",
"FFBBFFFRRR",
"BBBFFBBRRL",
"FBBBFBFRLL",
"BFFFBBBLRR",
"FFBFFBBLRR",
"BFFBBFFRLL",
"BFFBBBFRLL",
"BFFBFFFRLL",
"BFFFFFFLLR",
"FFBFFFBLLL",
"FBBFBFFRRL",
"FFBBFBBLRL",
"FFBBBBFRRL",
"FBBBFBBLLR",
"FFBFBFFLRL",
"FBFFBFBLRR",
"BFBBFFBLLL",
"BFFFBBFRLL",
"FBFFBBFRRL",
"BFFBFBBLRL",
"BFFFBFBRRR",
"FFFBBBFLLL",
"BBFFFFFLRR",
"BBFFFBFLLL",
"FBFFFFFRRL",
"BFBFFFFRRR",
"FFBFFFBLLR",
"FFFBBFBLRL",
"FBFFFBFLLL",
"FBBBBFBRRR",
"FBBFFFBRRL",
"FBBFFBFRLL",
"FBBBBFFRLL",
"BFBFFFBRRR",
"BFBBBFBRLR",
"FBBBFFBLLL",
"BBFFFBFLRR",
"BFBBFFBRRL",
"BBFBBBFRLR",
"BFFFBFFRLR",
"FBBBFBFLLR",
"FBFBFBFRLL",
"FBFBBBFRLL",
"FFBFFBBRLL",
"FBFFFBFRRL",
"BBFBFFBRLR",
"FBFFFFFLRL",
"BFFBBBFLRL",
"FFBFFBBLLL",
"FFFBFBFLLL",
"BFBBBFFLRR",
"BBBFFBBRLL",
"BBBFFBFRLL",
"FBBFBFBLLL",
"BFBFFFFRLL",
"FBFBFFBRLR",
"FFFBBFBRRR",
"FBBFFFBRLR",
"FFFBBBFLRR",
"BFBFFFBLLR",
"BFBBBFFRLL",
"BFBBFFBRLR",
"BFFFFBFRLR",
"BFFFFBBLRR",
"BBBFFFBLRL",
"FBBBFFBRRR",
"BFBBFFFLRR",
"FBBBBFBRLL",
"BBFFBFFRRL",
"FFFBBFFLRL",
"FBBBBFFRRR",
"FBBFBFFLRL",
"BFBBFBFRLL",
"FBFFFBFRLL",
"FBFBBFFLLL",
"BFFFBBFRLR",
"BFFFBFFLRR",
"FFFBFBFLRL",
"FBFFFFFRLL",
"FFBFFFFRRL",
"FFBBFBFLRR",
"FFBFBBFRLR",
"FBFBFBFRLR",
"FBFBFFFRLL",
"FFBFFBFLRR",
"BFBFFBFRLR",
"BFFBFFFLRR",
"BBFBFBBLLR",
"FBFBFBBRRL",
"BFFBBBBLRL",
"BBFFBBBRRR",
"FBFFBBFRLL",
"BFFFBBBRRL",
"FBBFFFBLLR",
"BFFBBFBLRR",
"BFBBBBFLRL",
"FBFFBFBLLR",
"BFFBFFBRLR",
"FBBBBBFLRL",
"FBFFFBBLRL",
"BBFBFFFRLR",
"BFFBFFBLRL",
"FBBBBFBLLR",
"FFBBFFFLRR",
"BBFBBFBLLL",
"BBFFFBBLLL",
"FBBFBBBRLR",
"FBBFBBBLLR",
"BFFFFBFLRR",
"FBBBFFBLRR",
"FBFBFFBRLL",
"BFFBBBBRRR",
"BFFFFFFRLL",
"FBFBBBBLRL",
"FFBFBBFLLR",
"BFBBFBBLLL",
"BBFBFBBRRR",
"BFFFBFBLLL",
"BFBBFFBLRL",
"FBBBFFFLLR",
"FFBFFBBRRR",
"BBFBBBFRLL",
"FBBFBBBLLL",
"FBFBBBFLRR",
"BFBBFBFRRR",
"BFFFBFBRRL",
"BBFFBBBLRR",
"FBBFBFFLRR",
"BFFBFFBRLL",
"BFBFFFBLLL",
"BBFBBBFLLL",
"BFBBFFFRRL",
"FFBFBFBRRR",
"BFFBBFFRRL",
"BFFBFBFRLR",
"FFBFFFBRRL",
"BFFFBFBLRR",
"FBFBFFBLLL",
"FBFBFBFLLR",
"BFFBBBBLLR",
"FBBFFBBLLR",
"FBBFFBFLLL",
"BBBFFFBRLR",
"FBFFFBFRLR",
"BBFFBFFLRL",
"BFBFBBBLLL",
"FBFFFFBRRR",
"BFFBFFBRRR",
"FFBBBBBLLL",
"BBFFFBFRLR",
"BFFFFFBLLL",
"FBFBFBBLRR",
"FBFFBBBRRL",
"FBBBBBFLRR",
"BBBFFBFLRR",
"FBFBFFFLRR",
"FBBBBBBRRR",
"BFFBBFBRRR",
"BFFBFBFLLL",
"BFBBFFBLRR",
"BBFFBFFLLL",
"BFFFFFFLRR",
"BFFFBFBRLL",
"FBFFBFBRLL",
"FBFFBBBRLR",
"BBFFBFFRLL",
"FFBBFBBLRR",
"FBBBBBBLRR",
"FBBBBFBRRL",
"BFFFFBBRRL",
"FFBFFFBLRR",
"FBBFBFFLLL",
"BBFFFBBLRL",
"BBFBFFBLRL",
"BBFBFBBRLL",
"FBFFFBBLRR",
"BFBBFBBLLR",
"FFFBBBFRLR",
"FBFBFBBLLL",
"FBFFFFFLRR",
"BFBFBFBRRR",
"FBBFBBBLRL",
"BBFBBFBRLL",
"FBBFFBBLRR",
"BBFFBBBLLR",
"FBBFFBBLRL",
"FBFBFFFRRR",
"BBFFFBBRLR",
"BFFFFFFRRR",
"BBFFBBFRRR",
"FBFFBBFLRL",
"FFBBFBFLLL",
"FBFBFFBRRR",
"BFBBBBFRLL",
"FBBFBFBLRR",
"FBFBFFFLRL",
"FBBFFFFLRR",
"BFBFBFFRRL",
"BBFFBFBLRL",
"FBFFFFBLLL",
"FFBBFFFLLR",
"FBBFBBBRRR",
"FBBBBBBRLR",
"BBFFFFFRLR",
"FFBBBFFLLL",
"FBBBBBFRRR",
"BFFBFFBLLL",
"BBFBBBBRLR",
"FFBBFBBLLR",
"FBFBFFFLLR",
"FBBFBFFRLL",
"FFBBFBBRRL",
"FBBFBFBRLL",
"FBBBBFBLRL",
"FFBBFFBLLR",
"BBFFBFBRRR",
"BFBFFFFRRL",
"BFFBFFFRRR",
"FBFBBFFLLR",
"FFFBBFBRLL",
"FFBBBBFRLL",
"FBBFBBFLLL",
"FBBFFBFLRL",
"FBFFBFBRRR",
"FFBBBFBLLL",
"FFBBBFFRRL",
"FBBFFBFLRR",
"FFFBFBFRRR",
"FFBBFBFRLL",
"BBFFBBBLLL",
"FBBBFFFRRL",
"BFBBFBFLLR",
"BBFBFFBRRR",
"FFBBBFBLRL",
"FFBFBBBRLL",
"FBFBFBBRLL",
"FFBFFFBLRL",
"BBFBFFFLLR",
"FBFFBFFLLL",
"FFBBBFFRRR",
"FBBFBFFLLR",
"BBFBFFBRRL",
"BBFBBBBRRR",
"FFBFFBFRRR",
"BFBFBFFLLL",
"BBFBFBFRLL",
"BBFBFBBLRL",
"BFBBFBBRLR",
"FBFFBBBRLL",
"FBBBBFFLRR",
"FFFBBBFLLR",
"BBFFFFBLRR",
"BBFFFFFRRL",
"FBFFBFFLRR",
"BFFFFFFLLL",
"FFFBBBBRRR",
"BFFFBFFRLL",
"FFBFBFFRLL",
"FFFBBBBLLL",
"FFBFFBBRRL",
"FFBFBBFRRR",
"BFBFBFBLRL",
"FBFFFFFRLR",
"BBFBFBFRRL",
"FFFBFBFRLL",
"BBBFFBBLLR",
"FFBFBBFRRL",
"BBBFFFFRRR",
"BBFBBFFRRL",
"FBBFBBBRLL",
"FFFBFBBRLL",
"FFBBBBBLRL",
"FFBBBFFLLR",
"BFBFFBBLLL",
"BFFBBFBLLR",
"BBFBBBFLRR",
"BBBFFBFLLR",
"FBBFFBFRRL",
"BBFFFBFLRL",
"FFBFBBFLRR",
"BFBBBFFLRL",
"BFFBFFFRRL",
"BBFBBFBLLR",
"BBFBFBBLLL",
"BFFBBFFRLR",
"FBBFFFFRRL",
"FBFBFBFLRR",
"BFFBFBBRRL",
"FFFBBFFRLL",
"FFBBBFBRLR",
"FFBBBBBRLL",
"BBFBFBFRRR",
"FBBFBBFRLL",
"BBBFFFBRLL",
"BFFBBBFRLR",
"BBFBBFFLLL",
"FBFFBBFLLL",
"BFFBBBBRLL",
"BBBFFFBLLR",
"BFBFFFFLRR",
"FBBFBBFLLR",
"FBBBFFBRLR",
"FBFBBFBRLL",
"FBFBFBFLLL",
"FBFBBBFRLR",
"BBBFFFFRLL",
"FBFFBBFLRR",
"FBBBFBBRLR",
"FFBBBFFRLR",
"BBFFBFBLRR",
"FFFBBBBRRL",
"BFBFFFBRRL",
"BFBFBFBLLR",
"FFBBBFBRRL",
"FBFBBBBRLL",
"BBFFBFBLLR",
"FFBFFFFLLR",
"FBBFBBBRRL",
"FBFBBBBLLL",
"BFBFFBFLRR",
"FFBFFFBRRR",
"FFFBBFFRRR",
"BBBFFBBLRR",
"FBFFBFFRRL",
"BFFFBFBRLR",
"BFFBBFFLRR",
"FBBBBFFRLR",
"BFBBFFFLRL",
"FBFFFBFLRR",
"FFBBFBFRLR",
"FBBBFBFLRR",
"BBBFFFBLLL",
"BBBFFBBLLL",
"FBBBFFFRRR",
"BBFFFFFLLL",
"FBBBBBFLLL",
"FFFBBFFRRL",
"FFFBFBBLRR",
"FBBBBFFLLR",
"BFBFFFBLRR",
"FBBBFBBLRL",
"BFBBBFFRRR",
"BFBFFBBRRR",
"BFFFFBFLRL",
"BFBBBBFLRR",
"BFFFFFFRRL",
"BBFBBFFRRR",
"FFBFBFFRLR",
"BBFBBFFLLR",
"BFBFBFFRLR",
"FFFBFBFRRL",
"FFBFFBBLLR",
"FBFBBFBLLR",
"BFBFBFBRRL",
"FFBBFBFRRR",
"FFBFBFBRRL",
"FBBFBBBLRR",
"FBBFFBBRLR",
"BFFFFBFLLL",
"BFBFFBBLRR",
"BBFFFBFRRL",
"BBFBBFFRLR",
"BFBBFFFRLR",
"FBFFFFFLLL",
"BBFFFFBRRL",
"BFBFBFFLRL",
"BBFFBBFRLL",
"BFFBFBFLRL",
"FBFBBBFLLR",
"FBBFBFBRRL",
"FFFBBBBRLR",
"BFBFFFBLRL",
"BFFFFFBRRR",
"BBFBFBBLRR",
"BFFFFFBRRL",
"BBBFFFFRRL",
"BFFBBBFRRL",
"FBFFBFBLLL",
"FBBBFFFLLL",
"FFBBBBFLRR",
"FFBFFBFLLR",
"BFBFBFFRRR",
"FBFBBFBLLL",
"BFFBBFBLRL",
"BFFBBBFLRR",
"FFBFBFFLLL",
"BFFFBFFRRR",
"FBFFFFFLLR",
"BBFBBFFLRR",
"FFBFFFBRLR",
"BFBFFFBRLL",
"BFFBFBFRLL",
"FFBBFFFRLL",
"FBFFFBBRRL",
"BFFFBBBRRR",
"FBFBBBBRRL",
"FBBFFFFLLL",
"FBBBFFBLRL",
"FBFFBFFRLL",
"FFFBBFFRLR",
"BFBFBBFRRR",
"BFBBFFFRRR",
"FFBBBFFLRL",
"BBFFFFFLRL",
"FFBFBBBLRR",
"BFFFFFBRLR",
"FBBFFBBRLL",
"FBFBBFFRLR",
"FFBBBFBLRR",
"FBBFBFBLRL",
"FBBFFBBRRR",
"FFFBBFBLRR",
"BFBFBBFLLR",
"BBBFFBBLRL",
"BFFFBBBLLL",
"BBFFFFFRRR",
"FFBBBBFRRR",
"FBFBFBFRRR",
"FFBFBFFRRR",
"FFBBFFBRRR",
"BFBFBFFRLL",
"BFBFFBFRRR",
"BBFFFBFRRR",
"BFFFFBBLLR",
"FFBBFBBLLL",
"FBFBBBBRLR",
"FBFBBFBLRR",
"BFBFBBFRLR",
"FBBBFBBRRL",
"FBFBFFFLLL",
"FFBBFBBRLL",
"BBFBBBBLRR",
"FBBFFBBRRL",
"BFBBBFBLLR",
"FFFBBFFLLR",
"FBBBBBFRRL",
"BFBBFFFLLL",
"BBFBBBBLLL",
"BFBFBBBRLR",
"BFFBBBFLLL",
"BFBBFBFRRL",
"BBFBFFFRRL",
"FFBBBFBLLR",
"FBFBBFBLRL",
"BBBFFFBRRL",
"BBFBFFBLLL",
"BBFBFFFLRR",
"FFBFBFBLLR",
"BFBFFFFLRL",
"BFBBBBBRRL",
"BBFFFBBRRR",
"BBFFBBFLLR",
"FBFFBBBLLL",
"BFFFFFFLRL",
"FBFBFBBRLR",
"FBBBFFFLRR",
"BBBFFFFRLR",
"FFBBFFBRLR",
"BBFBFFFRLL",
"BBFBFBFLLR",
"BFFFFBFLLR",
"FBFBFFFRRL",
"BFFFFBBLLL",
"FFFBBFFLLL",
"BFFFFBFRRR",
"FBBBFBFRLR",
"FBBBFBBLLL",
"BFFFFBBLRL",
"FBFFBFBRRL",
"BBFBBBBLLR",
"BFBBBFBLRL",
"FBFBBFFLRL",
"BFBFBBBLLR",
"FFBBFBFLLR",
"FFBFFFBRLL",
"BFFBFFBLRR",
"BFFBFFFLLL",
"BFFBBFFLLR",
"BBFFBBBRLR",
"BFFBBFBLLL",
"FBFBBFBRRL",
"FBFFFBBRLR",
"BFFBBBFRRR",
"FFBFFBBLRL",
"FBFBBFBRRR",
"BBFFBBBRRL",
"FBFBBBFRRL",
"BBFBBFBRRR",
"BBBFFFFLLL",
"BFBFBBFLRR",
"FBFFBBBRRR",
"BFBBFBFRLR",
"BBFBBFFLRL",
"BBFFBBBRLL",
}

function part1()
    function row_select(str, min, max)
        if #str == 1 then
            if str == "F" then
                return min
            else
                return max
            end
        else
            first_letter = string.sub(str, 1, 1)
            mid = math.floor((min + max) / 2)
            if first_letter == "F" then
                return row_select(string.sub(str, 2), min, mid)
            else
                return row_select(string.sub(str, 2), mid + 1, max)
            end
        end
    end
    function col_select(str, min, max)
        if #str == 1 then
            if str == "R" then
                return max
            else
                return min
            end
        else
            first_letter = string.sub(str, 1, 1)
            mid = math.floor((min + max) / 2)
            if first_letter == "R" then
                return col_select(string.sub(str, 2), mid + 1, max)
            else
                return col_select(string.sub(str, 2), min, mid)
            end
        end
    end
    max = 0
    for i = 1, #arr do
        row = row_select(string.sub(arr[i], 1, 7), 0, 127)
        col = col_select(string.sub(arr[i], 8, 10), 0, 7)
        id = row * 8 + col
        if (max < id) then
            max = id
        end
        print(tostring(row) .. " " .. tostring(col) .. " " .. tostring(id))
    end
    print(max)
    return max
end
function part2()
    function row_select(str, min, max)
        if #str == 1 then
            if str == "F" then
                return min
            else
                return max
            end
        else
            first_letter = string.sub(str, 1, 1)
            mid = math.floor((min + max) / 2)
            if first_letter == "F" then
                return row_select(string.sub(str, 2), min, mid)
            else
                return row_select(string.sub(str, 2), mid + 1, max)
            end
        end
    end
    function col_select(str, min, max)
        if #str == 1 then
            if str == "R" then
                return max
            else
                return min
            end
        else
            first_letter = string.sub(str, 1, 1)
            mid = math.floor((min + max) / 2)
            if first_letter == "R" then
                return col_select(string.sub(str, 2), mid + 1, max)
            else
                return col_select(string.sub(str, 2), min, mid)
            end
        end
    end
    seatidArr = {}
    max = 0
    min = 999999
    for i = 1, #arr do
        row = row_select(string.sub(arr[i], 1, 7), 0, 127)
        col = col_select(string.sub(arr[i], 8, 10), 0, 7)
        id = row * 8 + col
        if (max < id) then
            max = id
        end
        if (min > id) then
            min = id
        end
        seatidArr[id] = true
        print(tostring(row) .. " " .. tostring(col) .. " " .. tostring(id))
    end
    for j = min, max do
        if seatidArr[j] == nil then
            print(j)
        end
    end
end